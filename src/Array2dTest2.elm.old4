module Array2dTest2 exposing (..)

import Array2D
import Array2dOp


{--

  defaultCell :  String
  defaultCell = "@"

    array2Dexpand 10 10  defaultCell array2d

    array2Dtrans 0 0  2 2 8 8   defaultCell n12

    array2Dcopy 0 0  2 2 8 8    n12

    array2Dclear 0 0  2 2  defaultCell n12

    array2Dget 0 0  2 2  defaultCell n12

    array2Dset 8 8  n16 n12

    array2Dhjoin   defaultCell n16 n16

    array2Dvjoin   defaultCell n16 n16

--}

---------------------------------------------------

array2d =
    Array2D.fromList
      [ ["Row 1-Col 1", "Row 1-Col 2"]
      , ["Row 2-Col 1", "Row 2-Col 2"]
      ]

defaultCell :  String
defaultCell = "@"

n12 = 
    Array2dOp.array2Dexpand 10 10  defaultCell array2d

n13 = 
    Array2dOp.array2Dtrans 0 0  2 2 8 8   defaultCell n12
    --array2Dtrans 0 0  2 2 1 1   defaultCell n12

n14 = 
    Array2dOp.array2Dcopy 0 0  2 2 8 8    n12

n15 = 
    Array2dOp.array2Dclear 0 0  2 2  defaultCell n12
    --array2Dclear 0 0  2 2  "--" n12

n16 = 
    Array2dOp.array2Dget 0 0  2 2  defaultCell n12

n17 = 
    Array2dOp.array2Dset 8 8  n16 n12

n18 = 
    Array2dOp.array2Dhjoin   defaultCell n16 n16

n19 = 
    Array2dOp.array2Dvjoin   defaultCell n16 n16


---------------------------------------------------


---------------------------------------------------
type alias AutoArray2D a =
    -- { head : Array2D.Array2D Bool
    { head : Array2D.Array2D (Maybe (Array2D.Array2D a))
    , head_size : Int
    , surface_size : Int
    , defaultCell : a
    }
---------------------------------------------------
info :  AutoArray2D a ->  { defaultCell : a, head_size : Int, surface_size : Int }
info a2d =
   {
       head_size = a2d.head_size
     , surface_size = a2d.surface_size
     , defaultCell = a2d.defaultCell
   }

initAutoArray2D : Int -> Int -> a -> AutoArray2D a
initAutoArray2D  head_size_ surface_size_ defaultCell_ =
    let
       -- data = Array2D.repeat size_ size_ Fale
       head_ = Array2D.repeat head_size_ head_size_ Nothing

    in
       {
          head = head_
        , head_size = head_size_
        , surface_size = surface_size_
        , defaultCell = defaultCell_
       }
    
{--
    head size 6
    surface size 2

    head                     surface
    -- -- -- -- -- --         -- --
   |@@|  |  |  |  |  |  @@=> |  |  |
    -- -- -- -- -- --         -- --
   |  |  |  |  |  |  |       |  |  |
    -- -- -- -- -- --         -- --
   |  |  |  |  |  |  |
    -- -- -- -- -- --
   |  |  |  |  |  |  |
    -- -- -- -- -- --
   |  |  |  |  |  |  |
    -- -- -- -- -- --
   |  |  |  |  |  |  |
    -- -- -- -- -- --

--}

headSetAutoArray2D : Int -> Int ->  (Array2D.Array2D a) -> AutoArray2D a -> AutoArray2D a
headSetAutoArray2D   x_ y_ array2d_ autoarray2d_ =
    let
        head_ = autoarray2d_.head
        new_head = Array2D.set x_ y_  (Maybe.Just array2d_)   head_

    in
     {
       autoarray2d_ | head = new_head
     }

headDelAutoArray2D : Int -> Int ->  AutoArray2D a -> AutoArray2D a
headDelAutoArray2D   x_ y_  autoarray2d_ =
    let
        head_ = autoarray2d_.head
        new_head = Array2D.set x_ y_  Maybe.Nothing   head_

    in
     {
       autoarray2d_ | head = new_head
     }

{-- h  y => sueface --}
surfaceGetAutoArray2D : Int -> Int ->  AutoArray2D a -> (Maybe (Maybe (Array2D.Array2D a)))
surfaceGetAutoArray2D   x_ y_  autoarray2d_ =
    let
        head_ = autoarray2d_.head
        head_part = Array2D.get x_ y_   head_
     in
       head_part

{-- cow row => sueface --}
relativeSurfaceGetAutoArray2D : Int -> Int ->  AutoArray2D a -> (Maybe (Maybe (Array2D.Array2D a)))
relativeSurfaceGetAutoArray2D   c_ r_  autoarray2d_ =
    let
        head_ = autoarray2d_.head
        x_ = c_ // autoarray2d_.surface_size 
        y_ = r_ // autoarray2d_.surface_size   
        head_part = Array2D.get x_ y_   head_
     in
       head_part
       

cellGetAutoArray2D : Int -> Int -> AutoArray2D a ->  a
cellGetAutoArray2D   c_ r_  autoarray2d_ =
    let
        head_ = autoarray2d_.head
        x_ = c_ // autoarray2d_.surface_size 
        y_ = r_ // autoarray2d_.surface_size   
        x_a = c_  - ( x_ * autoarray2d_.surface_size )
        y_a = r_  - ( y_ * autoarray2d_.surface_size ) 
        surface = Array2D.get x_ y_   head_
    
        te = case surface of
             Just surface2 ->
                   case surface2 of
                      Just surface3 ->
                         let
                          cell = Array2D.get x_a y_a surface3
                         in
                         case cell of 
                            Just cell2 ->
                               cell2
                            _ ->
                               --defaultcell
                               autoarray2d_.defaultCell
                      _ ->
                         --defaultcell
                         autoarray2d_.defaultCell
             _ ->
                   --defaultcell
                   autoarray2d_.defaultCell
     in
        te

expandAutoArray2D : Int -> Int ->  Array2D.Array2D (Maybe (Array2D.Array2D a)) 
                                -> Array2D.Array2D (Maybe (Array2D.Array2D a))
expandAutoArray2D rowsnum colsnum  orgArray2D =
    let
      _ = Debug.log "expand rows:" rowsnum
      _ = Debug.log "expand cols:" colsnum
      baseArray2D =
          --Array2D.repeat rowsnum colsnum fillvalue
          Array2D.repeat rowsnum colsnum Maybe.Nothing

      --cellReplace: Int -> Int -> a -> a
      cellReplace: Int -> Int ->  Maybe (Array2D.Array2D a) ->  Maybe (Array2D.Array2D a)
      cellReplace row col cell =
          let
            data = Array2D.get row col orgArray2D
          in
            case data of
                Nothing ->
                     cell
                Just newcell ->
                     newcell
    in
    Array2D.indexedMap cellReplace baseArray2D

cellSetAutoArray2D : Int -> Int -> a -> AutoArray2D a ->  AutoArray2D a
cellSetAutoArray2D   c_ r_ cell autoarray2d_ =
    let
        --_ = Debug.log "--cellSetAutoArray2D"  0
        _ = Debug.log "--cellSetAutoArray2D head_size:"  autoarray2d_.head_size
        head_ = autoarray2d_.head
        x_ = c_ // autoarray2d_.surface_size 
        y_ = r_ // autoarray2d_.surface_size   
        x_a = c_  - ( x_ * autoarray2d_.surface_size )
        y_a = r_  - ( y_ * autoarray2d_.surface_size ) 
        surface = Array2D.get x_ y_   head_
    
        -- hard over to expand array2d --
 {--     
        autoarray2d_2 = 
              if x_ >= autoarray2d_.surface_size then
                 if y_ >= autoarray2d_.surface_size then
                           let 
                              _ = Debug.log "*** surface size over x & y"  0
                              --head_t = Array2dOp.array2Dexpand x_ y_  autoarray2d_.defaultCell head_
                              --head_t = array2Dexpand x_ y_  autoarray2d_.defaultCell head_
                              --head_t = array2Dexpand (x_+1) (y_+1)  head_
                              head_t = expandAutoArray2D (x_+1) (y_+1)  head_
                              m_ = max x_ y_

                           in
                           { head = head_t
                              ,head_size = m_ + 1
                              ,surface_size = autoarray2d_.surface_size
                              ,defaultCell = autoarray2d_.defaultCell
                            }
                 else
                     let _ = Debug.log "*** surface size over x "  0 in
                     autoarray2d_
              else
                 if y_ >= autoarray2d_.surface_size then
                     let _ = Debug.log "*** surface size over y "  0 in
                     autoarray2d_
                 else
                     let _ = Debug.log "-"  0 in
                     autoarray2d_
--}
        autoarray2d_2 = 
              --if x_ >= autoarray2d_.surface_size || y_ >= autoarray2d_.surface_size then
              if x_ >= autoarray2d_.head_size || y_ >= autoarray2d_.head_size then  --<BUG
                           let 
                              _ = Debug.log "*** head size  :" autoarray2d_.head_size 
                              _ = Debug.log "*** head size over x :"  x_
                              _ = Debug.log "*** head size over y :"  y_
                              --head_t = Array2dOp.array2Dexpand x_ y_  autoarray2d_.defaultCell head_
                              --head_t = array2Dexpand x_ y_  autoarray2d_.defaultCell head_
                              --head_t = array2Dexpand (x_+1) (y_+1)  head_
                              head_t = expandAutoArray2D (x_+1) (y_+1)  head_
                              m_ = max x_ y_

                           in
                           { head = head_t
                              ,head_size = m_ + 1
                              ,surface_size = autoarray2d_.surface_size
                              ,defaultCell = autoarray2d_.defaultCell
                            }
              else
                     autoarray2d_

        head_2 = autoarray2d_2.head
        x_2 = c_ // autoarray2d_2.surface_size 
        y_2 = r_ // autoarray2d_2.surface_size   
        x_a2 = c_  - ( x_2 * autoarray2d_2.surface_size )
        y_a2 = r_  - ( y_2 * autoarray2d_2.surface_size ) 
        surface_ = Array2D.get x_2 y_2   head_2
        new_surface = case surface_ of
             Just surface2 ->
                   case surface2 of
                      Just surface3 ->
                         Array2D.set x_a2 y_a2 cell  surface3
                      _ ->
                         let
                          surface4 = Array2D.repeat autoarray2d_2.surface_size autoarray2d_2.surface_size autoarray2d_2.defaultCell
                         in
                         Array2D.set x_a2 y_a2 cell  surface4
             _ ->
                   let
                    -- _ = Debug.log "*** surface set" x_ 
                    -- _ = Debug.log "*** surface set" y_
                    surface5 = Array2D.repeat autoarray2d_2.surface_size autoarray2d_2.surface_size autoarray2d_2.defaultCell
                   in
                   Array2D.set x_a2 y_a2 cell  surface5
     
        new_head = Array2D.set x_2 y_2  (Maybe.Just new_surface)  head_2
    in
    { autoarray2d_2 | head = new_head }
        

{--
foldlAutoArray2D : (a -> b -> b) -> b -> AutoArray2D a -> b
foldlAutoArray2D   func acc autoarray2d_ =
    let
        rows = autoarray2d_

        head_ = autoarray2d_.head
        x_ = c_ // autoarray2d_.surface_size 
        y_ = r_ // autoarray2d_.surface_size   
        x_a = c_  - ( x_ * autoarray2d_.surface_size )
        y_a = r_  - ( y_ * autoarray2d_.surface_size ) 
        surface = Array2D.get x_ y_   head_
    
        te = case surface of
             Just sur ->
                   case sur of
                      Just sur2 ->
                         let
                          rr = Array2D.get x_a y_a sur2
                         in
                         case rr of 
                            Just c ->
                               c
                            _ ->
                               defaultcell
                      _ ->
                               defaultcell

             _ ->
                               defaultcell
     in
        te
--}



---------------------------------------------------
p : String -> String
p str =
   Debug.log str  
   "OK"

{--
d : Int -> Int -> AutoArray2D String -> (Maybe (Array2D.Array2D a))
d c r a_ =
   let
     ret = cellSetAutoArray2D c r "+" a_
     _ = Debug.log ret 0 
   in
    ret
--}
--------------------------------------------

a20 = initAutoArray2D 10 10 "_"

a21 = Array2D.repeat  10 10 "@"

--a22 = headSetAutoArray2D 0 0 (Maybe.Just a21) a20
--a23 = headSetAutoArray2D 0 0 (Maybe.Nothing)  a22
a22 = headSetAutoArray2D 0 0  a21 a20
a23 = headDelAutoArray2D 0 0  a22

a24 = cellSetAutoArray2D 0 0 "+" a23
a25 = cellSetAutoArray2D 99 99 "+" a24

